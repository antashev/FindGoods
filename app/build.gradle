apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'

Properties properties = new Properties()
File propertiesFile = project.rootProject.file('local.properties')
def rgToken = null
def rcRgToken = null
def signPath = null
def signStorePass = null
def signAlias = null
def signPass = null
if (propertiesFile.exists()) {
    properties.load(propertiesFile.newDataInputStream())
    rgToken = properties.getProperty("RateAndGoodsToken")
    rcRgToken = properties.getProperty("rcRateAndGoodsToken")
    ext.fabric_key = properties.getProperty("fabricApiKey")
    signPath = properties.getProperty("signPath")
    signStorePass = properties.getProperty("signStorePass")
    signAlias = properties.getProperty("signAlias")
    signPass = properties.getProperty("signPass")
} else {
    rgToken = RateAndGoodsToken
    rcRgToken = rcRateAndGoodsToken
    ext.fabric_key = fabricApiKey
}

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "ru.modulkassa.findgoods"
        minSdkVersion 15
        targetSdkVersion 27
        versionCode 4
        versionName "1.3"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "RATEANDGOODS_ENDPOINT", '"https://api.ratengoods.com/data-api/v0.10/"'
        vectorDrawables.useSupportLibrary = true
    }
    signingConfigs {
        release {
            storeFile file(signPath)
            storePassword signStorePass
            keyAlias signAlias
            keyPassword signPass
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions "type"
    productFlavors {
        production {
            dimension "type"
            applicationIdSuffix ".prod"
            buildConfigField "String", "MODULKASSA_ENDPOINT", '"https://service.modulpos.ru/api/"'
            buildConfigField "String", "STORAGE_ENDPOINT", '"https://storage.avanpos.com/inv/"'
            buildConfigField "String", "RATEANDGOODS_TOKEN", rgToken
            buildConfigField "boolean", "USE_CRASHLYTICS", "true"
            ext.enableCrashlytics = true
        }
        rc {
            dimension "type"
            applicationIdSuffix ".rc"
            buildConfigField "String", "MODULKASSA_ENDPOINT", '"https://rc.dev.avanpos.com/api/"'
            buildConfigField "String", "STORAGE_ENDPOINT", '"https://rc.dev.avanpos.com/api/inv/"'
            buildConfigField "String", "RATEANDGOODS_TOKEN", rcRgToken
            buildConfigField "boolean", "USE_CRASHLYTICS", "false"
            ext.enableCrashlytics = false
        }
    }

//    applicationVariants.all { variant ->
//        variant.outputs.all {
//            outputFileName = "${project.name}-${variant.name}-${variant.versionName}.apk"
//        }
//    }

    lintOptions {
        abortOnError false
        xmlOutput file("./build/reports/lint-results.xml")
    }
}

afterEvaluate {
    initCrashlyticsPropertiesIfNeeded()
}

def initCrashlyticsPropertiesIfNeeded() {
    def propertiesFile = file('fabric.properties')
    if (!propertiesFile.exists()) {
        def commentMessage = "This is autogenerated crashlytics property from system environment to prevent key to be committed to source control."
        ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
            entry(key: "apiKey", value: ext.fabric_key)
        }
    }
}

dependencies {
    implementation project(':RateAndGoodsApi')
    //implementation 'com.antashev:RateAndGoodsApi:1.0.0'
    // rxjava
    implementation 'io.reactivex.rxjava2:rxjava:2.1.6'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'

    // retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.6.0'

    // timber
    implementation 'com.jakewharton.timber:timber:4.6.0'

    // moxy
    implementation 'com.android.support:support-v4:27.0.2'
    implementation 'com.arello-mobile:moxy:1.5.3'
    implementation 'com.arello-mobile:moxy-app-compat:1.5.3'
    kapt 'com.arello-mobile:moxy-compiler:1.5.3'

    // gson runtime adapter
    implementation 'org.danilopianini:gson-extras:0.2.1'

    // zxing
    implementation 'me.dm7.barcodescanner:zxing:1.9.8'

    // DI
    implementation 'com.github.stephanenicolas.toothpick:toothpick-runtime:1.1.1'
    kapt 'com.github.stephanenicolas.toothpick:toothpick-compiler:1.1.1'

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:27.0.2'
    implementation 'com.android.support:recyclerview-v7:27.0.2'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:design:27.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.1@aar') {
        transitive = true
    }
}
